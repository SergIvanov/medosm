unit factor;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, DBGridEhGrouping, GridsEh, DBGridEh, StdCtrls, DBCtrls,
  WordXP, OleServer, DateUtils, ToolCtrlsEh, DBGridEhToolCtrls, DynVarsEh,
  EhLibVCL, DBAxisGridsEh;

type
  TfFactor = class(TForm)
    Panel1: TPanel;
    Panel2: TPanel;
    Panel3: TPanel;
    Edit1: TEdit;
    Label1: TLabel;
    DBGridEh1: TDBGridEh;
    DBGridEh2: TDBGridEh;
    DBNavigator1: TDBNavigator;
    Button1: TButton;
    WordApplication1: TWordApplication;
    WordDocument1: TWordDocument;
    Button2: TButton;

    procedure Edit1Change(Sender: TObject);
    procedure DBGridEh1KeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure Button1Click(Sender: TObject);
    function DuplicateStrIS(s_in: string): string;
    function DuplicateStrVr(s_in: string): string;
    procedure MakeStr(var sfact, sfactn, sissl, svr: string);
    procedure DBGridEh1DblClick(Sender: TObject);
    procedure Edit1KeyPress(Sender: TObject; var Key: Char);
    procedure Button2Click(Sender: TObject);

    procedure FormShow(Sender: TObject);





  private
    { Private declarations }

  public
    datePr : TDate;
    { Public declarations }
  end;

var
  fFactor: TfFactor;

implementation

uses DM, editor;

{$R *.dfm}

function TfFactor.DuplicateStrIS(s_in: string): String;
var
  s: TStringList;
begin
    s := TStringList.Create;
  try

    s.Sorted := true;
    s.Duplicates := dupIgnore;
    s.Text := stringReplace(s_in, ';', #13#10, [rfReplaceAll]);
    result := s.Text;
  finally
    s.Free;
  end;
end;

function TfFactor.DuplicateStrVr(s_in: string): String;
var
  s: TStringList;
begin
    s := TStringList.Create;
  try

    s.Sorted := true;
    s.Duplicates := dupIgnore;
    s.Text := stringReplace(s_in, ';', #13#10, [rfReplaceAll]);
    result := s.commaText;
  finally
    s.Free;
  end;

end;

procedure TfFactor.MakeStr(var sfact, sfactn, sissl, svr: string);
var
  Year, Month, Day: Word;
begin
  // Сбор данных из таблицы factor в строку
  fDM.TFactId.Active := false;
  fDM.TFactId.CommandText := 'SELECT * FROM factor WHERE id_rab=' +
    fDM.TRab.FieldByName('id').AsString;
  fDM.TFactId.Active := true;

  // ---Создание строки исследования (Обязательные исследования)
  sissl := 'Клинический анализ крови (гемоглобин, цветной показатель, эритроциты, тромбоциты, лейкоциты, лейкоцитарная формула, СОЭ)'
    + ';Клинический анализ мочи (удельный вес, белок, сахар, микроскопия осадка);Электрокардиография;Рентгенография грудной клетки в двух проекциях;Биохимический скрининг: содержание в сыворотке крови глюкозы, холестерина;';
  if fDM.TRab.FieldByName('sex').AsString = 'жен' then
    sissl := sissl +
      'Акушер-гинеколог бактериологическое (на флору) и цитологическое (на атипичные клетки) исследования;';
  DecodeDate(fDM.TRab.FieldByName('data_proh').AsDateTime, Year, Month, Day);
  if (fDM.TRab.FieldByName('sex').AsString = 'жен') and
    (YearsBetween(Now, fDM.TRab.FieldByName('data_r').AsDateTime) > 40) then
    sissl := sissl + '1 раз в 2 года маммография или УЗИ молочных желез;';
  // ------------------------------

  // ---Создание строки врачи (Обязательные)
  svr := svr + 'Врач-терапевт;Врач-психиатр;Врач-нарколог;';
  if fDM.TRab.FieldByName('sex').AsString = 'жен' then
    svr := svr + 'Акушер-гинеколог;';
  // ------------------------------

  while not(fDM.TFactId.Eof) do
  begin
    sfact := sfact + 'пр' + fDM.TFactId.FieldByName('code').AsString + ' ' +
      fDM.TFactId.FieldByName('naim').AsString + '; ';
    sfactn := sfactn + 'пр' + fDM.TFactId.FieldByName('code').AsString + '; ';
    svr := svr + fDM.TFactId.FieldByName('vrach').AsString;
    sissl := sissl + fDM.TFactId.FieldByName('issl').AsString;
    fDM.TFactId.Next;
  end;
end;

procedure TfFactor.Button1Click(Sender: TObject);
var
  Shablon: OleVariant;
  sfact, sfactn, svr, sissl, st: string;
  staj, stajd: integer;
begin
  Shablon := ExtractFileDir(ParamStr(0)) + '\Шаблоны\pmarsh.doc';
  WordApplication1.Connect;
  WordApplication1.Visible := true;
  WordApplication1.Documents.Add(Shablon, EmptyParam, EmptyParam, EmptyParam);
  WordDocument1.ConnectTo(WordApplication1.ActiveDocument);

  WordApplication1.Visible := true;

  fEditor.WordGotoBookmark('fio');
  fEditor.WordInsertText(fDM.TRab.FieldByName('fam').AsString + ' ' +
    fDM.TRab.FieldByName('imya').AsString + ' ' + fDM.TRab.FieldByName('fath')
    .AsString);

  fEditor.WordGotoBookmark('prof');
  fEditor.WordInsertText(fDM.TRab.FieldByName('profes').AsString);

  MakeStr(sfact, sfactn, sissl, svr);

  fEditor.WordGotoBookmark('fact');
  fEditor.WordInsertText(sfact);

  fEditor.WordGotoBookmark('staj');

  st := fDM.TRab.FieldByName('staz_rab_fact').AsString;
  if length(st) = 4 then
  begin
    staj := strtoint(st);
    stajd := currentyear;
    staj := stajd - staj;
    st := inttostr(staj);
  end;
  fEditor.WordInsertText(st);

  fEditor.WordGotoBookmark('period');
  fEditor.WordInsertText(fDM.TRab.FieldByName('srok_proh').AsString);

  fEditor.WordGotoBookmark('obsl');
  fEditor.WordInsertText(DuplicateStrIS(sissl));

  fEditor.WordGotoBookmark('spec');
  fEditor.WordInsertText(DuplicateStrVr(svr));

  fEditor.WordGotoBookmark('date');
  fEditor.WordInsertText(fDM.TRab.FieldByName('data_proh').AsString);

  WordApplication1.Disconnect;
end;

procedure TfFactor.Button2Click(Sender: TObject);
var
  sfactn: string;
begin
  // Сбор данных из таблицы factor в строку
  fDM.TFactId.Active := false;
  fDM.TFactId.CommandText := 'SELECT * FROM factor WHERE id_rab=' +
    fDM.TRab.FieldByName('id').AsString;
  fDM.TFactId.Active := true;

  while not(fDM.TFactId.Eof) do
  begin
    sfactn := sfactn + 'пр' + fDM.TFactId.FieldByName('code').AsString + '; ';
    fDM.TFactId.Next;
  end;

  if sfactn <> '' then
  begin
    fDM.TRab.Edit;
    fDM.TRab.FieldByName('vredn_fact').AsString := sfactn;
    fDM.TRab.Post;
  end;
  Close;
end;

procedure TfFactor.DBGridEh1DblClick(Sender: TObject);
begin
   fDM.TFactId.Active := false;
  fDM.TFactId.CommandText := 'SELECT * FROM factor WHERE id_rab=' +
    fDM.TRab.FieldByName('id').AsString + ' and code='+QuotedStr(fDM.TSFactor.FieldByName('code').AsString);
  fDM.TFactId.Active := true;

  if fDM.TFactId.RecordCount = 0 then
   begin

      fDM.TFactor.Append;
      fDM.TFactor.FieldByName('code').AsString :=
        fDM.TSFactor.FieldByName('code').AsString;
      fDM.TFactor.FieldByName('naim').AsString :=
        fDM.TSFactor.FieldByName('naim').AsString;
      fDM.TFactor.FieldByName('vrach').AsString :=
        fDM.TSFactor.FieldByName('vrach').AsString;
      fDM.TFactor.FieldByName('issl').AsString :=
        fDM.TSFactor.FieldByName('issl').AsString;
      fDM.TFactor.Post;

      Edit1.Clear;

   end
   else
   begin
     ShowMessage('Уже есть такой фактор!');
   end;
end;

procedure TfFactor.DBGridEh1KeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = 13 Then
  begin
    fDM.TFactor.Append;
    fDM.TFactor.FieldByName('code').AsString :=
      fDM.TSFactor.FieldByName('code').AsString;
    fDM.TFactor.FieldByName('naim').AsString :=
      fDM.TSFactor.FieldByName('naim').AsString;
    fDM.TFactor.FieldByName('vrach').AsString :=
      fDM.TSFactor.FieldByName('vrach').AsString;
    fDM.TFactor.FieldByName('issl').AsString :=
      fDM.TSFactor.FieldByName('issl').AsString;
    fDM.TFactor.Post;
    Edit1.Clear;
    Edit1.SetFocus;
  end;
end;

procedure TfFactor.Edit1Change(Sender: TObject);
begin
  if Edit1.Text <> '' then
  begin
    fDM.TSFactor.Filtered := false;
    ed := Edit1.Text;
    fDM.TSFactor.Filtered := true;
  end
  else
    fDM.TSFactor.Filtered := false;
end;

procedure TfFactor.Edit1KeyPress(Sender: TObject; var Key: Char);
begin
  if (Key = ',') then
  begin
    Key := '.';
  end;
end;





procedure TfFactor.FormShow(Sender: TObject);
begin


fDM.TSFactor.Close;

fDM.TSFactor.CommandText := 'select * from sfactorN';

fDM.TSFactor.Open;





end;

end.
